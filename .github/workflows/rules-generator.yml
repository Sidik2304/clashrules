#=================================================
# Description: Generate Rule Provider for Clash
# HelmiWrt by helmiau.com
#=================================================

name: HelmiClash Rule Generator

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 17 * * *
#  watch:
#    types: started

jobs:
  release:
    name: Generate ${{ matrix.rule_name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rule_name: Adobe
          - rule_name: YouTube
          - rule_name: Instagram
          - rule_name: Facebook
          - rule_name: TikTok
          - rule_name: All-In-One

    env:
      RULENAME: ${{ matrix.rule_name }}
      RULENAME_RESOLVE: ${{ matrix.rule_name }}_Resolve
      BMSRC: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/${{ matrix.rule_name }}/${{ matrix.rule_name }}.yaml
      BMSRC_RESOLVE: https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/${{ matrix.rule_name }}/${{ matrix.rule_name }}_Resolve.yaml
 
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Generate ${{ matrix.rule_name }} rule file
        run: |
          if [[ $RULENAME = "All-In-One" ]]; then
            echo -e "Waiting 20 secs before creating $RULENAME rule..."
            sleep 20
            echo -e "Downloading required rules for $RULENAME.yaml"
            wget --no-check-certificate $(curl -L https://github.com/helmiau/clashrules/releases/tag/clashrules-$(date +%Y.%m.%d) | grep "/helmiau/clashrules/releases/download" | grep "yaml" | sed -e 's/\"//g' -e 's/ //g' -e 's/rel=.*//g' -e 's#<ahref=#http://github.com#g')
            ls | grep "yaml"
            find . -type f -name '*.yaml' | while read FILE ; do
                echo -e $(readlink -f ${FILE})
                namafile=$(echo -e "$FILE" | cut -f 1 -d '.')
                sed -i "s/payload:/\n\n# $namafile/g" ${FILE}
                if ! grep -q $RULENAME ${FILE}; then
                    echo "# $RULENAME\npayload:\n" > $RULENAME.yaml
                fi
                $FILE >> $RULENAME.yaml
                rm $FILE
            done
            echo -e "Creating $RULENAME.yaml"
          else
            echo -e "Downloading $RULENAME.yaml"
            curl -L $BMSRC > $RULENAME.yaml
            sed -i '/^#/d' $RULENAME.yaml
            if wget -S --spider $BMSRC_RESOLVE 2>&1 | grep -q 'HTTP/1.1 200 OK'; then
                echo -e "Downloading $RULENAME_RESOLVE.yaml"
                curl -L $BMSRC_RESOLVE > $RULENAME_RESOLVE.yaml
                sed -i '/^#/d' $RULENAME_RESOLVE.yaml
            fi
          fi
          echo -e "Listing YAML files"
          ls | grep "yaml"
          echo "RELEASE_NAME=HelmiClash $(date +%Y.%m.%d)" >> $GITHUB_ENV
          echo "TAG_NAME=clashrules-$(date +%Y.%m.%d)" >> $GITHUB_ENV

      - name: Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          files: "*.yaml"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          